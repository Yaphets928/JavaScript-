Javascript原型模式总结梳理

    对象总是由类中实例化而来，类和对象的关系就像模具跟模件一样。Javascript中没有类的概念，就算ES6中引入的class也不过是一种语法糖，本质上还是利用原型实现。在原型编程语言中，类并不是必需的，对象不一定需要由类实例化而来，而是通过克隆另外一个对象来得到。
    原型模式是用来创建对象的一种模式。在以类为中心的语言中，要创建一个对象首先要指定这个对象的类型，然后实例化一个对象。使用原型模式创建对象时不必关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。所以在前者中如果要根据一个对象创建多个相同的对象，我们需要先保存这个对象的所有属性信息，然后将属性信息设置到新创建的对象上，而在原型模式中我们只需要使用克隆就能完成同样的功能。
    在Java等以类为中心的面向对象语言中，经常使用new实例化一个对象。但是Javascript是基于原型的面向对象语言，在这里new运算符创建对象的方式与Java中的new运算符并不相同，Javascript中的new运算符也是通过克隆来实例化对象的,克隆的是构造器函数的原型对象。
  基于构造函数的原型模式就有了，原型模式解决了方法或者属性不能共有的问题，在原型模式中，把实例之间相同的属性和方法提取成共有的属性和方法，即：想让谁共有，就把它放在类.prototype上。
    有三个非常重要的特性：
    1.每一个函数数据类型（普通函数、类）都有一个自带的属性：prototype（原型），并且这个属性是一个对象数据类型的值；
    2.在prototype上浏览器天生给它加了一个属性：constructor（构造函数），属性值是当前函数（类）本身；
    3.每一个对象数据类型（普通的对象、实例、prototype...）也天生自带一个属性：__proto__，属性值是当前实例所属的原型（prototype）。
   
