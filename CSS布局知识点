1.translate()后的%格式 移动的是自身长宽的百分比
transform中使用多个属性时却需要有空格隔开。记住了是空格隔开!!!
垂直居中
不知道自己高度和父容器高度的情况下, 利用绝对定位只需要以下三行：
parentElement{
        position:relative;
    }
 childElement{
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
 }
若父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可
    parentElement{
        height:xxx;
    }
    .childElement {
      position: relative;
      top: 50%;
      transform: translateY(-50%);
    }
不考虑兼容老式浏览器的话，用Flex布局简单直观一劳永逸：
parentElement{
    display:flex;/*Flex布局*/
    display: -webkit-flex; /* Safari */
    align-items:center;/*指定垂直居中*/
}

2.vertical-align
vertical-align 属性设置元素的垂直对齐方式
baseline  默认。元素放置在父元素的基线上。
sub       垂直对齐文本的下标。
super     垂直对齐文本的上标
top       把元素的顶端与行中最高元素的顶端对齐
text-top  把元素的顶端与父元素字体的顶端对齐
middle    把此元素放置在父元素的中部。
bottom    把元素的顶端与行中最低的元素的顶端对齐。
text-bottom 把元素的底端与父元素字体的底端对齐。
length % 使用 "line-height" 属性的百分比值来排列此元素。允许使用负值。
inherit  规定应该从父元素继承 vertical-align 属性的值。

表格居中
、td{ text-align:center;}

、<td align="center" valign="middle">
    前一个是水平居中 后一个是垂直居中
    对应的css写法:
    <td style="text-align:center;vertical-align:middle;">
    
    
3.flex
  https://www.cnblogs.com/xuyuntao/articles/6391728.html
  Flex是Flexible Box的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性
  为Flex布局以后，子元素的float、clear和vertical-align属性将失效。
        以下6个属性设置在容器上：
                flex-direction　　容器内项目的排列方向(默认横向排列)　　row | row-reverse | column | column-reverse
                flex-wrap　　容器内项目换行方式    nowrap （不换行）（默认）| wrap （换行）（第一行在上方）| wrap-reverse（在必要的时候拆行或拆列，第一行在下方）
                flex-flow　　以上两个属性的简写方式   flex-flow: <flex-direction> || <flex-wrap>;
                justify-content　　项目在主轴上的对齐方式  flex-start | flex-end | center | space-between | space-around
                                                        flex-start：在主轴上由左或者上开始排列 
                                                        flex-end：在主轴上由右或者下开始排列
                                                        center：在主轴上居中排列
                                                        space-between：在主轴上左右两端或者上下两端开始排列
                                                        space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
               
               align-items　　项目在交叉轴上如何对齐  flex-start | flex-end | center | baseline | stretch;
               ![Image text](https://github.com/Yaphets928/Web-/blob/master/img_folder/bg2015071011.png)
                align-content　　定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。flex-start | flex-end | center | space-between | space-around | stretch
               ![Image text](https://github.com/Yaphets928/Web-/blob/master/img_folder/bg2015071012.png)
               
      容器中项目的属性：
                order　　项目的排列顺序。数值越小，排列越靠前，默认为0。
                flex-grow　　项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
                flex-shrink　　项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
                flex-basis　　在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
                flex　　是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
                align-self　　允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
         flex:1  意思是 占满
4.响应式布局
@media screen and (min-width: 769px){
}
@media (max-width: 768px)

宽度需要使用百分比
处理图片缩放的方法:简单的解决方法可以使用百分比，但这样不友好，会放大或者缩小图片。
                那么可以尝试给图片指定的最大宽度为百分比。假如图片超过了，就缩小。假如图片小了，就原尺寸输出。
用::before和::after伪元素 +content 属性来动态显示一些内容或者做其它很酷的事情，在 css3 中，任何元素都可以使用 content 属性了，
这个方法就是结合 css3 的 attr 属性和 HTML 自定义属性的功能
pre ，iframe，video 等，都需要和img一样控制好宽度。对于table，建议不要增加 padding 属性，低分辨率下使用内容居中：·
                table th, table td { padding: 0 0; text-align: center; }
                

*content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。
        content: normal | string | attr() | url() | counter()
                normal ： 默认值。
                string ： 查入文本的内容，一般是一个字符串。
                attr() ： 插入元素的属性值，语法：attr(attribute)。
                url() ： 插入一个外部资源文件，可以是图像，音频，视频文件或浏览器所支持的其他任何资源。
                counter() ： 计数器，用于插入排序标识,counter()不仅可以追加数字编号，还可以追加字母编号或罗马数字编号，语法：content:couter(计数器名，编号种类)
                                                                                 content: "第"counter(number)"点、";
                                                                                 
*calc
用于动态计算长度值。 
需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；
任何长度值都可以使用calc()函数进行计算；
calc()函数支持 "+", "-", "*", "/" 运算；
calc()函数使用标准的数学运算优先级规则；


*:after清除浮动的作用：浮动元素容器的clearing问题
1. 问题的由来
有这样一种情形：在一个容器（container）中，有两个浮动的子元素。
<div>
        <div style="float:left;width:45%;"></div>
        <div style="float:right;width:45%;"></div>
</div>
在浏览器中一运行，就会出现意想不到的结果。实际视图是子元素显示在父容器的外部。
2. 问题的原因与浮动定位有关。
在CSS规范中，浮动定位不属于正常的页面流（page flow），是独立定位的。所以，只含有浮动元素的父容器，在显示时不考虑子元素的位置，就当它们不存在一样。这就造成了显示出来，父容器好像空容器一样。

3.解决方法一：添加空元素
经典的解决方法，就是在浮动元素下方添加一个非浮动元素。
代码这样写：
<div>
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
<div style="clear:both;"></div>
</div>
原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。

4.解决方法二：浮动的父容器
另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。
<div style="float:left;">
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
</div>
这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。

5.解决方法三：浮动元素的自动clearing
让父容器变得可以自动"清理"（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。
要做到这点，只要为父容器加上一条"overflow: hidden"的CSS语句就行了。关于为何父容器可以自动识别：由于加上overflow:hidden之后要计算超出的大小来隐藏，所以父容器会自动撑开自己把所有的子元素放进去，同时会计算浮动的子元素。
代码这样写：
<div style="overflow: hidden;">
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
</div>
这种方法的缺点主要有二个，一个是IE 6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。

6.解决方法四：能不能通过CSS语句添加子元素呢，这样就不用修改HTML代码了？
回答是可以的，我们知道CSS语句中有一个:after伪选择符，就可以在父容器的尾部自动创建一个子元素，这正好符合我们的需要。
下面的代码参照了lifesinger的写法：
.clearfix:after {
content: "\0020";
display: block;
height: 0;
clear: both;
}
"clearfix"是父容器的class名称，"content:"020";"是在父容器的结尾处放一个空白字符，"height: 0;"是让这个这个空白字符不显示出来，"display: block; clear: both;"是确保这个空白字符是非浮动的独立区块。
但是，:after选择符IE 6不支持，也就是说上面的这段代码在IE 6中无效，这怎么办？
我们添加一条IE 6的独有命令"zoom:1;"就行了，这条命令的作用是激活父元素的"hasLayout"属性，让父元素拥有自己的布局。IE 6会读取这条命令，其他浏览器则会直接忽略它。

7.最终代码
.clearfix:after {
content: "\0020";
display: block;
height: 0;
clear: both;
}
.clearfix {
zoom: 1;
}


5.background:#00FF00 url(bgimage.gif) no-repeat fixed top;}

属性说明：
background:背景色 背景图像 背景图像是否及如何重复 背景图像是否固定或者随着页面的其余部分滚动 背景图像的起始位置

背景色
color-name
color-rgb
color-hex
transparent

背景图像
url(URL)
none

背景图像是否及如何重复
repeat
repeat-x
repeat-y
no-repeat

背景图像是否固定或者随着页面的其余部分滚动
scroll  
fixed

背景图像的起始位置
top left
top center
top right
center left
center center
center right
bottom left
bottom center
bottom right
x% y%
xpos ypos

6，box-sizing

padding + border + width= 盒子的宽度
padding+ border + height = 盒子的高度

box-sizing
语法：box-sizing: content-box | border-box | inherit;
设置box-sizing:border-box以后
例如，上面我们想要一个宽度为200px的盒子，那么我们直接设置宽度为200px。
当再设置它的左右边框和左右补白后，它的内容区会自动调整。这可能更直接和一目了然。
content-box 
描述：在宽度和高度之外绘制元素的内边距和边框。
IE8及以上版本支持该属性，Firefox 需要加上浏览器厂商前缀-moz-，对于低版本的IOS和Android浏览器也需要加上。


width:100%，则说明p的width会继承父元素的600px就已经充满div区域，然后自己又有padding，所以会出现滚动条。
而width:auto则比较聪明，它是总体宽度（广义，包括width，margin,padding,border这些）等于父级宽度（狭义，内容区，仅指width），所以如果padding已经左右占去20px的空间，那么width给的值就是580px。
但无论是width:100%还是auto，其计算的参照都是父级内容区width值，而非总宽度值。。
100%是宽度占父元素100%或页面100%(position：fixed)等，inherit的宽度是继承父元素的宽度，父元素是多少就是多少
主要在position不是static时有很大区别

topleft属性在定位元素上才有用

line-height是行高的意思，height则是定义元素自身的高度。
例如下面这段代码
<div class="test">文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字</div>
如果我们定义.test {line-height:20px;}，那么这个元素的实际高度将取决于其中内容的多少，假如文字部分在浏览器里面显示为一行，那么这个div的实际高度就是20px，如果文字显示为两行，那么div的实际高度就是40px，而且文字的行高是20px的；
如果我们定义.test{height:40px}，那么这个元素的实际高度一般并不会因为内容的多少而发生改变，如果文字显示为一行，那么这个div的高度仍然是40px，如果显示为2行，但是文字的行高不够20px，这个div的高度也不会因为文字内容的高度小于height而发生改变。不过如果文字内容的高度大于40px了，一般来说这个div的高度还是会相应增加的。

line-height:150%与line-height:1.5的真正区别是什么？150%是根据父元素的字体大小计算出行高，并且子元素依然沿用这个计算后的行高。而1.5则是根据子元素自己字体的大小去乘以1.5来计算行高。另，1.5em等也是按照150%的情况来算的。

border-radius: none　｜　length{1,4} [/ length{1,4} 
其中每一个值可以为 数值或百分比的形式。 
length/length　第一个lenght表示水平方向的半径，而第二个表示竖直方向的半径。 
如果是一个值，那么 top-left、top-right、bottom-right、bottom-left 四个值相等。 
如果是两个值，那么 top-left和bottom-right相等，为第一个值，top-right和bottom-left值相等，为第二个值。 
三个值四个值都可以

outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。

font:fontfont-size/line-height，用来规定字体尺寸和行高

section
何时使用，基本上可以这两点：
section 不是一个专用来做容器的标签，专用的是 div
section 里应该有 标题（h1~6），但文章中推荐用 article 来代替
我们可以理解为一个非文章段落，有明确 id 的一个特殊模块容器（不是专用以包住块的容器）
一个section通常由内容和标题组成，通常不推荐那些没有标题的内容用section，


label
<label>元素的直观效果是直接显示标记之间的文本，而且不会为文本呈现任何特殊效果。但是，它和其他文本标记所不同的是，它为鼠标用户改进了用户体验性。 
这是因为，<label>元素可以附带一个for属性，只要将该属性的值设置为表单中任何一个控件的id属性的值，则当用户点击该标签（文本）时，浏览器就会自动将焦点转到和标签相关的表单控件上。即：如果在<label>元素内点击文本，就会触发此控件。
select中的option里 label属性规定更短版本的选项。
value 属性规定在表单被提交时被发送到服务器的值。
<option> 与 <option/> 之间的值是浏览器显示在下拉列表中的内容，而 value 属性中的值是表单被提交时被发送到服务器的值。

form
通俗的讲 form标签是用来进行表单提交用的
form标签里面的常见属性如下
action: 表单提交的地址, 肯定是要提交给某个服务器的,action的地址就是要提交的服务器的地址
method:以何种方式提交,常见的为get和post. 区别在于一个是明文(在url中显示),一个是暗文

form标签是和服务器交互用的, 以用户注册为例
用户在浏览器中的注册页面添加信息后,点击提交,此时是将这些信息提交至某个服务器
服务器根据提交的信息将注册信息保存. 这个过程就需要使用form标签了
form中action属性应该是服务器注册模块的地址
form标签下应该有input,textarea,select等表单标签以及<input type=" submit"标签
当点击submit按钮时,浏览器会自动将表单信息封装提交至action中的地址
所谓的提交就是访问action中地址并携带着form表单中input,textarea,select的信息

7.offsetleft
可以判断一个物体的跟document的左边距离，也就是浏览器左边缘。
比如你写一个div 获取这个div之后alert(你的div.offsetLeft)就可以看到他现在距离浏览器左边的距离。
当然你也可以用他给对象赋值，offset不单单只有Left  还有offsetTop  offsetWidth offsetHeight  都是JS里很有用的属性。


8.documentElement 属性以一个元素对象返回一个文档的文档元素。
document.body.clientWidth ==> 可见区域宽度
document.body.clientHeight ==> 可见区域高度
document.documentElement.clientWidth ==> 页面对象宽度（即BODY对象宽度加上Margin宽）
document.documentElement.clientHeight ==> 页面对象高度（即BODY对象高度加上Margin高）
scrollWidth ==> 获取对象的滚动宽度
scrollHeight ==>  获取对象的滚动高度
scrollLeft ==> 设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离（被卷去的左）
scrollTop ==> 设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离（被卷去的高）
offsetLeft ==> 获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置
offsetTop ==> 获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置
offsetHeight ==> 获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度
event.clientX ==> 相对文档的水平座标
event.clientY ==> 相对文档的垂直座标
event.offsetX ==> 相对容器的水平坐标
event.offsetY ==> 相对容器的垂直坐标
document.documentElement.scrollTop ==> 垂直方向滚动的值
event.clientX+document.documentElement.scrollTop ==> 相对文档的水平座标+垂直方向滚动的量

div.offsetWidth 元素边框之内的宽度
div.offsetHeight 元素边框之内的高度











